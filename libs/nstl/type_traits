// -*- C++ -*-
#pragma once

#include "nstl-configs/LibConfig.h"
#include "nstl/cstddef"

namespace NSTL_NS {
    
    //Helper Class
    template <class T, T v>
    struct integral_constant {
        static constexpr T value = v;
        typedef T value_type;
        typedef integral_constant<T, v> type;
        constexpr operator value_type() const noexcept { return value; }
        constexpr value_type operator()() const noexcept { return value; }
    };
    
    typedef integral_constant<bool, true> true_type;
    typedef integral_constant<bool, false> false_type;

    //Remove Const
    template <class T>
    struct remove_const {
        typedef T type;
    };

    template <class T>
    struct remove_const <const T> {
        typedef T type;
    };

    //Remove Volatile
    template <class T>
    struct remove_volatile {
        typedef T type;
    };

    template <class T>
    struct remove_volatile<volatile T> {
        typedef T type;
    };

    //Remove Const Volatile
    template <class T>
    struct remove_cv {
        typedef typename remove_const< typename remove_volatile<T>::type>::type type;
    };

    //TODO(vim): Filter out const, reference and functions for the add_*
    //Add Const
    template <class T>
    struct add_const {
        typedef const T type;
    };

    //Add Volatile
    template <class T>
    struct add_volatile {
        typedef volatile T type;
    };

    //Add Const Volatile
    template <class T>
    struct add_cv {
        typedef const volatile T type;
    };

    //Helpers
    template <class T>
    using remove_const_t = typename remove_const<T>::type;
    template <class T>
    using remove_volatile_t = typename remove_volatile<T>::type;
    template <class T>
    using remove_cv_t = typename remove_cv<T>::type;
    template <class T>
    using add_const_t = typename add_const<T>::type;
    template <class T>
    using add_volatile_t = typename add_volatile<T>::type;
    template <class T>
    using add_cv_t = typename add_cv<T>::type;

namespace NSTL_HNS {
    //Is Void
    template <class T>
    struct _is_void : false_type {};

    template <>
    struct _is_void <void> : true_type {};
}

    template <class T>
    struct is_void : NSTL_HNS::_is_void <remove_cv_t<T>> {};

namespace NSTL_HNS {
    //Is Null Pointer
    template <class T>
    struct _is_null_pointer : false_type {};

    template <>
    struct _is_null_pointer<NSTL_NS::nullptr_t> : true_type {};
}

    template <class T>
    struct is_null_pointer : NSTL_HNS::_is_null_pointer<remove_cv_t<T>> {};

namespace NSTL_HNS {
    //Is Integral
    template<class T> struct _is_integral : false_type {};

    template<> struct _is_integral<bool> : true_type {};
    template<> struct _is_integral<char> : true_type {};
    template<> struct _is_integral<signed char> : true_type {};
    template<> struct _is_integral<unsigned char> : true_type {};
    template<> struct _is_integral<wchar_t> : true_type {};
    template<> struct _is_integral<char16_t> : true_type {};
    template<> struct _is_integral<char32_t> : true_type {};
    template<> struct _is_integral<short> : true_type {};
    template<> struct _is_integral<unsigned short> : true_type {};
    template<> struct _is_integral<int> : true_type {};
    template<> struct _is_integral<unsigned int> : true_type {};
    template<> struct _is_integral<long> : true_type {};
    template<> struct _is_integral<unsigned long> : true_type {};
    template<> struct _is_integral<long long> : true_type {};
    template<> struct _is_integral<unsigned long long> : true_type {};
    //TODO(vim): larger int types
}

    template <class T>
    struct is_integral : NSTL_HNS::_is_integral<remove_cv_t<T>> {};

namespace NSTL_HNS {
    //Is Floating Point
    template <class T> struct _is_floating_point : false_type {};

    template <> struct _is_floating_point<float> : true_type {};
    template <> struct _is_floating_point<double> : true_type {};
    template <> struct _is_floating_point<long double> : true_type {};
}

    template <class T>
    struct is_floating_point : NSTL_HNS::_is_floating_point<remove_cv_t<T>> {};

namespace NSTL_HNS {
    //Is Array
    template <class T> struct _is_array : false_type {};

    template <class T> struct _is_array <T[]> : true_type {};
    template <class T, size_t N> struct _is_array <T[N]> : true_type {};
}

    template <class T>
    struct is_array : NSTL_HNS::_is_array <remove_cv_t<T>> {};

namespace NSTL_HNS {
    //Is Pointer
    template <class T> struct _is_pointer : false_type {};

    template <class T> struct _is_pointer<T*> : true_type {};
}

    template <class T>
    struct is_pointer : NSTL_HNS::_is_pointer<remove_cv_t<T>> {};

    //Is LValue Reference
    template <class T> struct is_lvalue_reference : false_type {} ;
    template <class T> struct is_lvalue_reference<T&> : true_type {};

    //Is RValue Reference
    template <class T> struct is_rvalue_reference : false_type {};
    template <class T> struct is_rvalue_reference<T&&> : true_type {};

    //Is Reference
    template <class T> struct is_reference : false_type {};
    template <class T> struct is_reference <T&> : true_type {};
    template <class T> struct is_reference <T&&> : true_type {};

namespace NSTL_HNS {
    //Is Member Pointer
    template <class T> struct _is_member_pointer : false_type {};

    template <class T, class U> struct _is_member_pointer <T U::*> : true_type {};
}

    template <class T>
    struct is_member_pointer : NSTL_HNS::_is_member_pointer<remove_cv_t<T>> {};

    //Is Union
    template <class T>
    struct is_union : integral_constant<bool, NSTL_IS_UNION(T)> {};

    //Is Class
    template <class T>
    struct is_class : integral_constant<bool, NSTL_IS_CLASS(T)> {};

namespace NSTL_HNS {
    //Is Function (Taken from Clang)
    struct dummy_type {};
    struct two_char { char lx[2]; };
    template <class T> char  test(T*);
    template <class T> char  test(dummy_type);
    template <class T> two_char test(...);
    template <class T> T& source(int);
    template <class T> dummy_type source(...);

    template <class T, bool = is_class<T>::value ||
                        is_union<T>::value ||
                        is_void<T>::value ||
                        is_reference<T>::value ||
                        _is_null_pointer<T>::value>
        struct _is_function
        : integral_constant<bool, sizeof(test<T>(source<T>(0))) == 1>
    {};
    template <class _Tp> struct _is_function<_Tp, true> : false_type {};
}
    
    template <class T>
    struct is_function : NSTL_HNS::_is_function<remove_cv_t<T>> {};

namespace NSTL_HNS {
    //Is Member Function Pointer
    template <class T> struct _is_member_function_pointer : false_type {};

    template <class T, class U> struct _is_member_function_pointer <T U::*> : is_function<T> {};
}

    template <class T>
    struct is_member_function_pointer : NSTL_HNS::_is_member_function_pointer<remove_cv_t<T>>::type {};

    //Is Member Object Pointer
    template <class T>
    struct is_member_object_pointer : 
        integral_constant<bool, is_member_pointer<T>::value && !is_member_function_pointer<T>::value>
    {};

    //Is Enum
    template <class T> struct is_enum : integral_constant<bool, NSTL_IS_ENUM(T)> {};

    //Is Arithmetic
    template <class T>
    struct is_arithmetic : 
        integral_constant <bool, is_floating_point<T>::value || is_integral<T>::value>
    {};

    //Is Fundamental
    template <class T>
    struct is_fundamental :
        integral_constant <bool, is_arithmetic<T>::value || is_void<T>::value || is_null_pointer<T>::value>
    {};

    //Is Object
    template <class T>
    struct is_object :
        integral_constant <bool, !is_function<T>::value && !is_void<T>::value && !is_reference<T>::value>
    {};

    //Is Scalar
    template <class T>
    struct is_scalar :
        integral_constant <bool, is_enum<T>::value || is_pointer<T>::value || is_member_pointer<T>::value || is_arithmetic<T>::value || is_null_pointer<T>::value>
    {};

    //Is Compound
    template <class T>
    struct is_compound : 
        integral_constant <bool, !is_fundamental<T>::value>
    {};

    //Is Const
    template <class T>
    struct is_const : false_type {};

    template <class T>
    struct is_const <const T> : true_type {};

    //Is Volatile
    template <class T>
    struct is_volatile : false_type {};

    template <class T>
    struct is_volatile <volatile T> : true_type {};

    //Is Trivial
    template <class T>
    struct is_trivial : integral_constant <bool, NSTL_IS_TRIVIAL(T)> {};

    //Is Trivially Copyable
    template <class T>
    struct is_trivially_copyable : integral_constant <bool, NSTL_IS_TRIVIALLY_COPYABLE(T)> {};

    //Is Standard Layout
    template <class T>
    struct is_standard_layout : integral_constant <bool, NSTL_IS_STANDARD_LAYOUT(T)> {};

    //Is POD
    template <class T>
    struct is_pod : integral_constant <bool, NSTL_IS_POD(T)> {};

    //Is Literal Type
    template <class T>
    struct is_literal_type : integral_constant <bool, NSTL_IS_LITERAL_TYPE(T)> {};

    //Is Empty
    template <class T>
    struct is_empty : integral_constant <bool, NSTL_IS_EMPTY(T)> {};

    //Is Polymorphic
    template <class T>
    struct is_polymorphic : integral_constant <bool, NSTL_IS_POLYMORPHIC(T)> {};

    //Is Abstract
    template <class T>
    struct is_abstract : integral_constant <bool, NSTL_IS_ABSTRACT(T)> {};

    //Is Final
    template <class T> struct is_final : integral_constant <bool, NSTL_IS_FINAL(T)> {};

namespace NSTL_HNS {
    //Is Signed
    template <class T, bool = is_arithmetic<T>::value>
    struct _is_signed : false_type {};

    template <class T>
    struct _is_signed <T, true> : integral_constant<bool, T(-1) < T(0)> {};
}

    template <class T> struct is_signed : NSTL_HNS::_is_signed<T> {};

    //Is Unsigned
    template <class T>
    struct is_unsigned : integral_constant <bool, is_arithmetic<T>::value && !is_signed<T>::value> {};

    //Is Constructible
    template <class T, class... Args>
    struct is_constructible : integral_constant <bool, NSTL_IS_CONSTRUCTIBLE(T, Args...)> {};

    //Is Default Constructible
    template <class T>
    struct is_default_constructible : is_constructible<T>::type {};

namespace NSTL_HNS {
    //Remove Reference
    template <class T> struct _remove_reference { typedef T type; };
    template <class T> struct _remove_reference <T&>  { typedef T type; };
    template <class T> struct _remove_reference <T&&> { typedef T type; };
}

    template <class T>
    struct remove_reference : NSTL_HNS::_remove_reference<T> {};


    template <class T> struct add_lvalue_reference;
    template <class T> struct add_rvalue_reference;
    template <class T>
    using remove_reference_t = typename remove_reference<T>::type;
    template <class T>
    using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;
    template <class T>
    using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

    template <class T> struct is_copy_constructible;
    template <class T> struct is_move_constructible;
    template <class T, class U> struct is_assignable;
    template <class T> struct is_copy_assignable;
    template <class T> struct is_move_assignable;
    template <class T> struct is_destructible;
    template <class T, class... Args> struct is_trivially_constructible;
    template <class T> struct is_trivially_default_constructible;
    template <class T> struct is_trivially_copy_constructible;
    template <class T> struct is_trivially_move_constructible;
    template <class T, class U> struct is_trivially_assignable;
    template <class T> struct is_trivially_copy_assignable;
    template <class T> struct is_trivially_move_assignable;
    template <class T> struct is_trivially_destructible;
    template <class T, class... Args> struct is_nothrow_constructible;
    template <class T> struct is_nothrow_default_constructible;
    template <class T> struct is_nothrow_copy_constructible;
    template <class T> struct is_nothrow_move_constructible;
    template <class T, class U> struct is_nothrow_assignable;
    template <class T> struct is_nothrow_copy_assignable;
    template <class T> struct is_nothrow_move_assignable;
    template <class T> struct is_nothrow_destructible;
    template <class T> struct has_virtual_destructor;

    // 20.10.5, type property queries:
    template <class T> struct alignment_of;
    template <class T> struct rank;
    template <class T, unsigned I = 0> struct extent;

    // 20.10.6, type relations:
    template <class T, class U> struct is_same;
    template <class Base, class Derived> struct is_base_of;
    template <class From, class To> struct is_convertible;

    // 20.10.7.3, sign modifications:
    template <class T> struct make_signed;
    template <class T> struct make_unsigned;
    template <class T>
    using make_signed_t = typename make_signed<T>::type;
    template <class T>
    using make_unsigned_t = typename make_unsigned<T>::type;

    // 20.10.7.4, array modifications:
    template <class T> struct remove_extent;
    template <class T> struct remove_all_extents;
    template <class T>
    using remove_extent_t = typename remove_extent<T>::type;
    template <class T>
    using remove_all_extents_t = typename remove_all_extents<T>::type;

    // 20.10.7.5, pointer modifications:
    template <class T> struct remove_pointer;
    template <class T> struct add_pointer;
    template <class T>
    using remove_pointer_t = typename remove_pointer<T>::type;
    template <class T>
    using add_pointer_t = typename add_pointer<T>::type;

    // 20.10.7.6, other transformations:
    template <NSTL_NS::size_t Len,
        NSTL_NS::size_t Align = default - alignment> // see 20.10.7.6
        struct aligned_storage;
    template <NSTL_NS::size_t Len, class... Types> struct aligned_union;
    template <class T> struct decay;
    template <bool, class T = void> struct enable_if;
    template <bool, class T, class F> struct conditional;
    template <class... T> struct common_type;
    template <class T> struct underlying_type;
    template <class> class result_of; // not defined
    template <class F, class... ArgTypes> class result_of<F(ArgTypes...)>;
    template <NSTL_NS::size_t Len,
        NSTL_NS::size_t Align = default - alignment > // see 20.10.7.6
        using aligned_storage_t = typename aligned_storage<Len, Align>::type;
    template <NSTL_NS::size_t Len, class... Types>
    using aligned_union_t = typename aligned_union<Len, Types...>::type;
    template <class T>
    using decay_t = typename decay<T>::type;
    template <bool b, class T = void>
    using enable_if_t = typename enable_if<b, T>::type;
    template <bool b, class T, class F>
    using conditional_t = typename conditional<b, T, F>::type;
    template <class... T>
    using common_type_t = typename common_type<T...>::type;
    template <class T>
    using underlying_type_t = typename underlying_type<T>::type;
    template <class T>
    using result_of_t = typename result_of<T>::type;
    template <class...>
    using void_t = void;
} // namespace std
